import osimport numpy as npimport tensorflow as tfimport sysdef pairwise_distance(point_cloud):    """    Compute pairwise_distance of input point cloud    :param  point_cloud: tensor (batch_size, num_points, num_dims)            TF tensor in shape (B,N,3)            frustum point clouds with XYZ and intensity in point channels            XYZs are in frustum coordinate    :return: pairwise distance: (batch_size, num_points, num_points)    """    #point_cloud_xyz=tf.slice(point_cloud,[0,0,0],[-1,-1,3])        batch_size = point_cloud.get_shape()[0].value    num_point = point_cloud.get_shape()[1].value    og_batch_size=point_cloud.get_shape().as_list()[0]    point_cloud=tf.squeeze(point_cloud)    if og_batch_size==1:        point_cloud=tf.expand_dims(point_cloud,0)    point_cloud_transpose=tf.transpose(point_cloud,perm=[0,2,1])       ### Spatial transformation     #print("point_cloud_transpose.shape", point_cloud_transpose.get_shape())    point_cloud_inner= tf.matmul(point_cloud,point_cloud_transpose)    point_cloud_inner=-2*point_cloud_inner    point_cloud_square=tf.reduce_sum(tf.square(point_cloud),axis=-1,keep_dims=True)    point_cloud_square_transpose=tf.transpose(point_cloud_square,perm=[0,2,1]) ### Transformation back    #print("point_cloud_square_transpose.shape", point_cloud_square_transpose.get_shape())    #print("point_cloud_square+point_cloud_inner+point_cloud_square_transpose",(point_cloud_square+point_cloud_inner+point_cloud_square_transpose).get_shape())    return point_cloud_square+point_cloud_inner+point_cloud_square_transposedef knn(pairwise_distance, k=20):    """    Get KNN based on the pairwise distance    :param pairwise_distance: (batch_size, num_points, num_points)    :param k: int    :return: nearest neighbors:(batch_size, num_points, K)    """    neg_adj=-pairwise_distance    _, nn_idx=tf.nn.top_k(neg_adj,k=k)    return nn_idxdef get_edge_feature(frustum_point_cloud, nn_idx, k=20):    """    Construct edge feature for each point    :param frustum_point_cloud: (batch_size, num_points, 1, num_dims)    :param nn_idx: (batch_size,num_points,k)    :param k: int    :return:edge_features: (batch_size, num_points, k, num_dims)    """    #print("frus_point_cloud.shape", frustum_point_cloud.get_shape())    og_batch_size = frustum_point_cloud.get_shape().as_list()[0]    frustum_point_cloud=tf.squeeze(frustum_point_cloud)    #print("frus_point_cloud1.shape", frustum_point_cloud.get_shape(),tf.shape(frustum_point_cloud))    if og_batch_size == 1:        frustum_point_cloud = tf.expand_dims(frustum_point_cloud, 0)    frus_point_cloud_central = frustum_point_cloud    #print("frus_point_cloud_central.shape", frus_point_cloud_central.get_shape())    frustum_point_cloud_shape = frustum_point_cloud.get_shape()    batch_size = frustum_point_cloud_shape[0].value    num_points = frustum_point_cloud_shape[1].value    num_dims = frustum_point_cloud_shape[2].value    #print("num_dims",num_dims)    idx_ = tf.range(batch_size) * num_points    #print("tf.range(batch_size)",tf.range(batch_size).get_shape())    #print("idx",idx_.get_shape())    #print("idx__",tf.shape(idx_))    idx_ = tf.reshape(idx_, [batch_size, 1, 1])    #print("idx1",idx_.get_shape())    point_cloud_flat = tf.reshape(frustum_point_cloud, [-1, num_dims])    #point_cloud_flat = tf.reshape(frustum_point_cloud, [-1, 1])    #print("point_cloud_flat.shape", point_cloud_flat.get_shape())    point_cloud_neighbors = tf.gather(point_cloud_flat, nn_idx + idx_)        #print("point_cloud_neighbors.shape", point_cloud_neighbors.get_shape())    point_cloud_central = tf.expand_dims(frus_point_cloud_central, axis=-2)    print("point_cloud_central.shape", point_cloud_central.get_shape())    point_cloud_central = tf.tile(point_cloud_central, [1, 1, k, 1])    #point_cloud_central = tf.tile(point_cloud_central, [1, 1, 1, k])        print("point_cloud_central1.shape", point_cloud_central.get_shape())        edge_feature = tf.concat([point_cloud_central, point_cloud_neighbors - point_cloud_central], axis=-1)    #edge_feature=point_cloud_neighbors - point_cloud_central    #edge_feature=point_cloud_neighbors    #edge_feature1= tf.shape(tf.squeeze(edge_feature,[2]))    print("edge_feature.shape", edge_feature.get_shape())    #print("edge_feature1.shape", edge_feature1.get_shape())    #edge_feature=frustum_point_cloud    return edge_feature